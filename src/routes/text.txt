<script>
  
  import chroma from 'chroma-js';

  let selectedCol = "black"; 
  let rgbCol = '', cmykCol = '', hslCol = '', hsvCol = '', hexCol = '';

  // Functions to handle input changes
  function handleHex(event) {
    selectedCol = event.target.value;
  }

  function handleRgb(event) {
    selectedCol = chroma(`rgb(${event.target.value})`).hex(); 
  }

  function handleCmyk(event) {
    const cmykValues = event.target.value.split(',').map(v => parseFloat(v.trim()) / 100);
    selectedCol = chroma.cmyk(...cmykValues).hex(); 
  }

  function handleHsl(event) {
    const hslValues = event.target.value.split(',').map(v => parseFloat(v.trim()));
    selectedCol = chroma.hsl(hslValues[0], hslValues[1] / 100, hslValues[2] / 100).hex(); 
  }

  function handleHsv(event) {
    const hsvValues = event.target.value.split(',').map(v => parseFloat(v.trim()));
    selectedCol = chroma.hsv(hsvValues[0], hsvValues[1] / 100, hsvValues[2] / 100).hex(); 
  }


 $: {
    hexCol = chroma(selectedCol).hex();

    // RGB
    let rgbColor = chroma(selectedCol).rgb(); 
    rgbCol = `${rgbColor[0]}, ${rgbColor[1]}, ${rgbColor[2]}`;

    // CMYK
    let cmykColor = chroma(selectedCol).cmyk(); 
    cmykCol = `${Math.round(cmykColor[0] * 100)}%, ${Math.round(cmykColor[1] * 100)}%, ${Math.round(cmykColor[2] * 100)}%, ${Math.round(cmykColor[3] * 100)}%`;

    // HSV
    let hsvColor = chroma(selectedCol).hsv();
    hsvCol = `${Math.round(isNaN(hsvColor[0]) ? 0 : hsvColor[0])}°, ${Math.round(hsvColor[1] * 100)}%, ${Math.round(hsvColor[2] * 100)}%`;

    // HSL
    let hslColor = chroma(selectedCol).hsl(); 
    hslCol = `${Math.round(isNaN(hslColor[0]) ? 0 : hslColor[0])}°, ${Math.round(hslColor[1] * 100)}%, ${Math.round(hslColor[2] * 100)}%`;
  }
</script>

<style>
  .colors {
    display: flex;
    flex-direction: row;
    height: 150px;
  }

  .dispColor {
    background-color: var(--pick-color);
    width: 30%;
  }

  .colorbar {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 50px;
  }

  .eachInp {
    padding: 20px;
  }

  input {
    width: 300px;
  }

  label {
    cursor: pointer;
  }
</style>

<div class="cont">
  <div class="colors">
    <div class="dispColor" style="--pick-color: {selectedCol}">
    </div>
    <p>You have selected {selectedCol}</p>
  </div>

  <div class="colorbar">
    <div class="eachInp">
      <label> HEX
        <input type="text" bind:value={hexCol} on:input={handleHex}>
      </label>
    </div>

    <div class="eachInp">
      <label> RGB
        <input type="text" bind:value={rgbCol} on:input={handleRgb}>
      </label>
    </div>

    <div class="eachInp">
      <label> CMYK
        <input type="text" bind:value={cmykCol} on:input={handleCmyk}>
      </label>
    </div>

    <div class="eachInp">
      <label> HSV
        <input type="text" bind:value={hsvCol} on:input={handleHsv}>
      </label>
    </div>

    <div class="eachInp">
      <label> HSL
        <input type="text" bind:value={hslCol} on:input={handleHsl}>
      </label>
    </div>
  </div>
</div>
